plugins {
	id 'org.springframework.boot' version '2.6.8'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
}

apply plugin: 'idea'

group = 'com.book'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.jetbrains:annotations:20.1.0'
    implementation 'org.jetbrains:annotations:20.1.0'
    implementation 'org.springframework.kafka:spring-kafka'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
    implementation 'org.mapstruct:mapstruct:1.3.1.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
    implementation 'org.apache.commons:commons-lang3:3.10'
    implementation  'org.apache.commons:commons-collections4:4.0'
    annotationProcessor('org.hibernate:hibernate-jpamodelgen:5.4.18.Final')
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

idea {
	module {
		sourceDirs += file("out/production/classes/generated")
	}
}

/* jacocoTestCoverageVerification {
  violationRules {
	rule {
      element = 'CLASS'   
		limit {
			counter = 'METHOD'
			minimum = 0.5
		}
	}
    rule {
      element = 'CLASS'      
      limit {
		counter = 'METHOD'
        minimum = 0.9
      }
      excludes = [
        'com.book.store.common.*',
        'com.book.store.controllers.*',
        'com.book.store.dto.*',
        'com.book.store.filters.*',
        'com.book.store.mappers.*',
        'com.book.store.models.*',
        'com.book.store.repositories.*',
      ]
	  includes = [
		  'com.book.store.services.*'
	  ]
    }
  }
} */

def jacocoExclude = ['**/dto/**',
                     '**/models/**',
                      '**/filters/**',
                       '**/StoreApplication.**']

//code coverage
jacoco {
    toolVersion ="0.8.5"
    reportsDir=file("${rootDir}/reports/jacoco")
}

jacocoTestReport{
    reports{
        xml.enabled true
        xml.destination file("${rootDir}/build/reports/jacoco/report.xml")
        csv.enabled false
        html.destination file("${rootDir}/build/reports/jacoco/html")
    }

    def evaluate = afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude:  jacocoExclude)
        })
    }
    evaluate
}


test {
	finalizedBy jacocoTestReport
    // enable JUnit Platform (a.k.a. JUnit 5) support
	useJUnitPlatform()
}